{"ast":null,"code":"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./app\";\nconst mongoose = require(\"mongoose\");\nmongoose.connect(\"mongodb://localhost:27017/\", {\n  dbName: \"test\",\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}, err => err ? console.log(err) : console.log(\"Connected to test database\"));\n\n// Schema for users of app\nconst UserSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  date: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst User = mongoose.model(\"users\", UserSchema);\nUser.createIndexes();\nconst express = require(\"express\");\nconst app = express();\nconst cors = require(\"cors\");\nconsole.log(\"App listen at port 5000\");\napp.use(express.json());\napp.use(cors());\napp.get(\"/\", (req, resp) => {\n  resp.send(\"App is Working\");\n  // You can check backend is working or not by\n  // entering http://loacalhost:5000\n\n  // If you see App is working means\n  // backend working properly\n});\n\napp.post(\"/register\", async (req, resp) => {\n  try {\n    const user = new User(req.body);\n    let result = await user.save();\n    result = result.toObject();\n    if (result) {\n      delete result.password;\n      resp.send(req.body);\n      console.log(result);\n    } else {\n      console.log(\"User already register\");\n    }\n  } catch (e) {\n    resp.send(\"Something Went Wrong\");\n  }\n});\napp.listen(3000);\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );","map":{"version":3,"names":["React","ReactDOM","App","mongoose","require","connect","dbName","useNewUrlParser","useUnifiedTopology","err","console","log","UserSchema","Schema","name","type","String","required","email","unique","date","Date","default","now","User","model","createIndexes","express","app","cors","use","json","get","req","resp","send","post","user","body","result","save","toObject","password","e","listen"],"sources":["/Users/peternguyen/Documents/GitHub/Rizzup/frontend/src/index.js"],"sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./app\";\n\nconst mongoose = require(\"mongoose\");\nmongoose.connect(\n  \"mongodb://localhost:27017/\",\n  {\n    dbName: \"test\",\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n  },\n  (err) => (err ? console.log(err) : console.log(\"Connected to test database\"))\n);\n\n// Schema for users of app\nconst UserSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n  },\n  date: {\n    type: Date,\n    default: Date.now,\n  },\n});\nconst User = mongoose.model(\"users\", UserSchema);\nUser.createIndexes();\n\nconst express = require(\"express\");\nconst app = express();\nconst cors = require(\"cors\");\nconsole.log(\"App listen at port 5000\");\napp.use(express.json());\napp.use(cors());\napp.get(\"/\", (req, resp) => {\n  resp.send(\"App is Working\");\n  // You can check backend is working or not by\n  // entering http://loacalhost:5000\n\n  // If you see App is working means\n  // backend working properly\n});\n\napp.post(\"/register\", async (req, resp) => {\n  try {\n    const user = new User(req.body);\n    let result = await user.save();\n    result = result.toObject();\n    if (result) {\n      delete result.password;\n      resp.send(req.body);\n      console.log(result);\n    } else {\n      console.log(\"User already register\");\n    }\n  } catch (e) {\n    resp.send(\"Something Went Wrong\");\n  }\n});\napp.listen(3000);\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\n// root.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>\n// );\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AAEvB,MAAMC,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpCD,QAAQ,CAACE,OAAO,CACd,4BAA4B,EAC5B;EACEC,MAAM,EAAE,MAAM;EACdC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,EACAC,GAAG,IAAMA,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAC7E,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG,IAAIT,QAAQ,CAACU,MAAM,CAAC;EACrCC,IAAI,EAAE;IACJC,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACZ,CAAC;EACDC,KAAK,EAAE;IACLH,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,IAAI;IACdE,MAAM,EAAE;EACV,CAAC;EACDC,IAAI,EAAE;IACJL,IAAI,EAAEM,IAAI;IACVC,OAAO,EAAED,IAAI,CAACE;EAChB;AACF,CAAC,CAAC;AACF,MAAMC,IAAI,GAAGrB,QAAQ,CAACsB,KAAK,CAAC,OAAO,EAAEb,UAAU,CAAC;AAChDY,IAAI,CAACE,aAAa,CAAC,CAAC;AAEpB,MAAMC,OAAO,GAAGvB,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMwB,GAAG,GAAGD,OAAO,CAAC,CAAC;AACrB,MAAME,IAAI,GAAGzB,OAAO,CAAC,MAAM,CAAC;AAC5BM,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;AACtCiB,GAAG,CAACE,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;AACvBH,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC,CAAC,CAAC;AACfD,GAAG,CAACI,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,IAAI,KAAK;EAC1BA,IAAI,CAACC,IAAI,CAAC,gBAAgB,CAAC;EAC3B;EACA;;EAEA;EACA;AACF,CAAC,CAAC;;AAEFP,GAAG,CAACQ,IAAI,CAAC,WAAW,EAAE,OAAOH,GAAG,EAAEC,IAAI,KAAK;EACzC,IAAI;IACF,MAAMG,IAAI,GAAG,IAAIb,IAAI,CAACS,GAAG,CAACK,IAAI,CAAC;IAC/B,IAAIC,MAAM,GAAG,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;IAC9BD,MAAM,GAAGA,MAAM,CAACE,QAAQ,CAAC,CAAC;IAC1B,IAAIF,MAAM,EAAE;MACV,OAAOA,MAAM,CAACG,QAAQ;MACtBR,IAAI,CAACC,IAAI,CAACF,GAAG,CAACK,IAAI,CAAC;MACnB5B,OAAO,CAACC,GAAG,CAAC4B,MAAM,CAAC;IACrB,CAAC,MAAM;MACL7B,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC;EACF,CAAC,CAAC,OAAOgC,CAAC,EAAE;IACVT,IAAI,CAACC,IAAI,CAAC,sBAAsB,CAAC;EACnC;AACF,CAAC,CAAC;AACFP,GAAG,CAACgB,MAAM,CAAC,IAAI,CAAC;;AAEhB;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}