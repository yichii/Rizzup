{"ast":null,"code":"var _jsxFileName = \"/Users/peternguyen/rizz-up/test-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000\"); // Replace with your server's URL\n\nfunction App() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    // Listen for messages from the server and update the state when a message is received\n    socket.on(\"message-from-backend\", message => {\n      setMessage(message);\n    });\n    return () => {\n      // Clean up the WebSocket connection when the component unmounts\n      socket.disconnect();\n    };\n  }, []);\n  const sendMessage = message => {\n    // Send a message to the server\n    socket.emit(\"message\", message);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Message from the backend: \", message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendMessage(\"New message from client\"),\n      children: \"Send Message to Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ClLa+zvPL6vd0LAuHSvav3BaFBg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","io","jsxDEV","_jsxDEV","socket","App","_s","message","setMessage","on","disconnect","sendMessage","emit","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/peternguyen/rizz-up/test-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:4000\"); // Replace with your server's URL\n\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    // Listen for messages from the server and update the state when a message is received\n    socket.on(\"message-from-backend\", (message) => {\n      setMessage(message);\n    });\n\n    return () => {\n      // Clean up the WebSocket connection when the component unmounts\n      socket.disconnect();\n    };\n  }, []);\n\n  const sendMessage = (message) => {\n    // Send a message to the server\n    socket.emit(\"message\", message);\n  };\n\n  return (\n    <div>\n      <p>Message from the backend: {message}</p>\n      <button onClick={() => sendMessage(\"New message from client\")}>\n        Send Message to Server\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,SAASI,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd;IACAK,MAAM,CAACK,EAAE,CAAC,sBAAsB,EAAGF,OAAO,IAAK;MAC7CC,UAAU,CAACD,OAAO,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO,MAAM;MACX;MACAH,MAAM,CAACM,UAAU,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAIJ,OAAO,IAAK;IAC/B;IACAH,MAAM,CAACQ,IAAI,CAAC,SAAS,EAAEL,OAAO,CAAC;EACjC,CAAC;EAED,oBACEJ,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,GAAG,4BAA0B,EAACN,OAAO;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1Cd,OAAA;MAAQe,OAAO,EAAEA,CAAA,KAAMP,WAAW,CAAC,yBAAyB,CAAE;MAAAE,QAAA,EAAC;IAE/D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACX,EAAA,CA5BQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AA8BZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}